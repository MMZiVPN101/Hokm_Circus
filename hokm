Mohammadreza, [8/12/2025 6:42 PM]
حکم ۴ نفره – تک‌فایل :root{ --bg:#0f172a; /* slate-900 */ --panel:#111827; /* gray-900 */ --muted:#1f2937; /* gray-800 */ --text:#e5e7eb; /* gray-200 */ --accent:#22c55e; /* green-500 */ --danger:#ef4444; /* red-500 */ --warn:#f59e0b; /* amber-500 */ --card:#111827; --shadow: 0 10px 24px rgba(0,0,0,.35), 0 2px 8px rgba(0,0,0,.25); } *{box-sizing:border-box} html,body{height:100%} body{ margin:0; background: radial-gradient(1000px 600px at 50% -10%, #1e293b, #0b1220 60%, #070b14 100%); color:var(--text); font-family: Vazirmatn, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, Noto Sans, "Apple Color Emoji", "Segoe UI Emoji"; } .app{ max-width:1100px; margin:0 auto; padding:16px; display:grid; gap:12px } header{display:flex; align-items:center; justify-content:space-between; gap:12px} .title{font-size:20px; font-weight:800; letter-spacing:.3px} .panel{ background:linear-gradient(180deg, rgba(255,255,255,.03), rgba(255,255,255,.01)); border:1px solid rgba(255,255,255,.08); box-shadow:var(--shadow); border-radius:16px; padding:12px } .row{ display:flex; flex-wrap:wrap; gap:12px } .col{ flex:1 1 280px } .btn{ cursor:pointer; border:0; padding:10px 14px; border-radius:12px; font-weight:700; background:#18212f; color:var(--text); transition:.2s; box-shadow: 0 2px 0 rgba(255,255,255,.06) inset} .btn:hover{ transform:translateY(-1px); filter:brightness(1.1) } .btn:disabled{ opacity:.5; cursor:not-allowed } .btn-primary{ background:linear-gradient(180deg, #22c55e, #16a34a); color:#06140b } .btn-danger{ background:linear-gradient(180deg, #ef4444, #b91c1c); } .btn-warn{ background:linear-gradient(180deg, #f59e0b, #d97706); color:#1f1402 } <pre><code>.grid{ display:grid; grid-template-columns: repeat(12, 1fr); gap:12px } .card{ background:var(--card); border:1px solid rgba(255,255,255,.06); border-radius:16px; padding:12px; box-shadow:var(--shadow) } .players{ display:grid; grid-template-columns: repeat(4, 1fr); gap:10px } .player{ padding:10px; border:1px dashed rgba(255,255,255,.15); border-radius:12px } .player.active{ outline:2px solid var(--accent) } label{ display:block; font-size:12px; opacity:.85; margin-bottom:4px } input, select{ width:100%; padding:10px 12px; border-radius:12px; border:1px solid rgba(255,255,255,.18); background:#0b1220; color:var(--text) } .center-table{ display:grid; grid-template-columns: repeat(3, 1fr); align-items:center; gap:12px } .trick-area{ display:grid; grid-template-columns: repeat(3, 1fr); gap:8px; align-items:center; justify-items:center } .seat{ width:100%; height:100%; min-height:88px; display:flex; align-items:center; justify-content:center; border:1px dashed rgba(255,255,255,.15); border-radius:12px; padding:8px } .cards{ display:flex; flex-wrap:wrap; gap:8px } .card-chip{ min-width:54px; height:78px; border-radius:10px; display:flex; align-items:center; justify-content:center; padding:6px 8px; position:relative; background:linear-gradient(160deg, #0c1625, #0a0f1b); border:1px solid rgba(255,255,255,.1); box-shadow:0 6px 14px rgba(0,0,0,.35) } .card-chip.lead{ outline:2px dashed #9ca3af } .card-chip.allowed{ box-shadow:0 0 0 2px #22c55e88 inset } .card-chip.blocked{ opacity:.45; filter:grayscale(.6) } .rank{ font-weight:900; font-size:18px } .suit{ font-size:20px; margin-inline-start:6px } .heart,.diamond{ color:#ff6b6b } .club,.spade{ color:#c6d0f5 } .status{ font-size:14px; opacity:.9 } .badge{ display:inline-flex; align-items:center; gap:6px; background:#0e1726; border:1px solid rgba(255,255,255,.12); border-radius:999px; padding:6px 10px; font-weight:700 } .badge .suit{ margin:0 } .score{ display:flex; align-items:center; justify-content:space-between; gap:10px } .score .team{ flex:1; padding:10px; background:#0b1220; border:1px solid rgba(255,255,255,.12); border-radius:14px; display:flex; align-items:center; justify-content:space-between } .dots{ display:flex; gap:6px } .dot{ width:12px; height:12px; border-radius:99px; background:#1f2937; border:1px solid rgba(255,255,255,.08) } .dot.on{ background:var(--accent) } .help{ font-size:12px; opacity:.8 } .footer{

Mohammadreza, [8/12/2025 6:42 PM]
display:flex; flex-wrap:wrap; gap:8px; align-items:center; justify-content:space-between } @media (max-width: 700px){ .center-table{ grid-template-columns: 1fr } } </code></pre> 
♚ حکم ۴ نفره – تک‌فایلی (آفلاین/Pass‑and‑Play)
شروع دست جدید چرخش حاکم ریست کامل 
<section class="panel"> <div class="row"> <div class="col"> <div class="card"> <div class="players" id="playersCfg"></div> <div class="row" style="margin-top:10px"> <div class="col"> <label>سقف امتیاز (برندهٔ بازی): <small>پیش‌فرض 7</small></label> <input id="targetPoints" type="number" min="1" max="13" value="7" /> </div> <div class="col"> <label>حالت سریع (فقط یک دست ۱۳ تایی، بدون امتیاز دور)</label> <select id="quickMode"> <option value="0">خاموش</option> <option value="1">روشن</option> </select> </div> <div class="col"> <label>انتخاب تصادفی حاکم</label> <button class="btn" id="btnRandomHakem">حاکم شانسی</button> </div> </div> </div> </div> <div class="col"> <div class="card"> <div class="score" id="scoreboard"> <div class="team" id="team0"> <strong>تیم ♟ A+C</strong> <div class="dots" id="dots0"></div> </div> <div class="team" id="team1"> <strong>تیم ♟ B+D</strong> <div class="dots" id="dots1"></div> </div> </div> <div class="row" style="margin-top:10px"> <div class="col"> <div class="badge" id="hakemBadge">حاکم: —</div> </div> <div class="col"> <div class="badge" id="hokmBadge">حکم: —</div> </div> <div class="col"> <div class="badge" id="turnBadge">نوبت: —</div> </div> </div> <div class="help" style="margin-top:8px">راهنما: این نسخه برای «نوبتی-روی-یک-گوشی/لپ‌تاپ» طراحی شده. هر بازیکن زمان نوبتش روی «نمایش دست من» بزند و کارت را انتخاب کند؛ بقیه دست‌ها مخفی است.</div> </div> </div> </div> </section> <section class="panel"> <div class="center-table"> <div class="card"> <div style="display:flex; align-items:center; justify-content:space-between; gap:10px; margin-bottom:8px"> <strong>میز بازی / دور جاری</strong> <div class="status" id="roundStatus">—</div> </div> <div class="trick-area" id="trickArea"> <div class="seat" id="seat0">A</div> <div class="seat" id="seat1">B</div> <div class="seat" id="seat2">C</div> <div class="seat" id="seat3">D</div> </div> </div> <div class="card"> <div style="display:flex; align-items:center; justify-content:space-between; gap:10px; margin-bottom:8px"> <strong>دست بازیکن فعلی</strong> <div class="row"> <button class="btn" id="btnShow">نمایش دست من</button> <button class="btn" id="btnHide">پنهان کردن دست</button> </div> </div> <div class="cards" id="handArea"></div> </div> <div class="card"> <div style="display:flex; align-items:center; justify-content:space-between; gap:10px; margin-bottom:8px"> <strong>امتیاز دست (۱۳ تایی)</strong> <div class="status" id="tricksStatus">A+C: 0 | B+D: 0</div> </div> <div class="row"> <button class="btn btn-primary" id="btnChooseHokm" disabled>انتخاب حکم</button> <select id="suitPicker"> <option value="S">♠ پیک</option> <option value="H">♥ دل</option> <option value="D">♦ خشت</option> <option value="C">♣ گشنیز</option> </select> <button class="btn" id="btnNextTurn">نوبت بعدی</button> </div> <div class="help" style="margin-top:8px">ابتدا ۵ کارت به حاکم داده می‌شود؛ بعد از اعلام حکم، بقیه کارت‌ها پخش می‌شود.</div> </div> </div> </section> <section class="footer"> <div class="help">قوانین: دنبال‌خال اجباری است؛ در صورت نداشتن، می‌توان هر کارت (از جمله حکم) بازی کرد. برنده تریک: بالاترین حکم، در غیر این صورت بالاترین کارتِ خال شروع.</div> <div style="opacity:.7">نسخه 1.0 – بدون سرور، متن‌باز</div> </section> 
(function(){ // ===== Utilities ===== const SUITS = ['S','H','D','C']; const SUIT_ICON = {S:'♠', H:'♥', D:'♦', C:'♣'}; const SUIT_CLASS = {S:'spade', H:'heart', D:'diamond', C:'club'}; const RANKS = ['2','3','4','5','6','7','8','9','10','J','Q','K','A']; const RANK_VALUE = Object.fromEntries(RANKS.map((r,i)=>[r,i])); // 0..12 function makeDeck(){ const deck=[]; for(const s of SUITS){ for(const r of RANKS){ deck.push({suit:s, rank:r, id:s+r}); } } return deck; } function shuffle(arr){ for(let i=arr.length-1;i>0;i--){ const j=(Math.random()* (i+1))|0; [arr[i],arr[j]]=[arr[j],arr[i]] } return arr; }

Mohammadreza, [8/12/2025 6:42 PM]
function seatName(i){ return ['A','B','C','D'][i]; } function teamOf(seat){ return seat%2; } // team 0: A,C | team 1: B,D function cardHtml(card){ const el=document.createElement('div'); el.className='card-chip'; el.dataset.cid=card.id; el.innerHTML=<span class="rank">${card.rank}</span><span class="suit ${SUIT_CLASS[card.suit]}">${SUIT_ICON[card.suit]}</span>; return el; } // ===== State ===== const state = { players:[ {name:'بازیکن A'}, {name:'بازیکن B'}, {name:'بازیکن C'}, {name:'بازیکن D'}, ], targetPoints:7, quickMode:false, matchPoints:[0,0], // teams 0(A,C), 1(B,D) // per hand dealer:0, hakem:0, hokm:null, // 'S'|'H'|'D'|'C' deck:[], hands:[[],[],[],[]], turn:0, // seat index whose turn it is to play a card leadSuit:null, table:[null,null,null,null], // played cards for current trick tricksWon:[0,0], trickCount:0, phase:'setup', // 'setup' | 'first5' | 'declare' | 'dealRest' | 'play' | 'handOver' | 'matchOver' }; // ===== DOM ===== const playersCfg = document.getElementById('playersCfg'); const targetPointsEl = document.getElementById('targetPoints'); const quickModeEl = document.getElementById('quickMode'); const btnRandomHakem = document.getElementById('btnRandomHakem'); const dots0 = document.getElementById('dots0'); const dots1 = document.getElementById('dots1'); const hakemBadge = document.getElementById('hakemBadge'); const hokmBadge = document.getElementById('hokmBadge'); const turnBadge = document.getElementById('turnBadge'); const trickArea = document.getElementById('trickArea'); const seatEls = [0,1,2,3].map(i=>document.getElementById('seat'+i)); const roundStatus = document.getElementById('roundStatus'); const handArea = document.getElementById('handArea'); const btnShow = document.getElementById('btnShow'); const btnHide = document.getElementById('btnHide'); const tricksStatus = document.getElementById('tricksStatus'); const btnChooseHokm = document.getElementById('btnChooseHokm'); const suitPicker = document.getElementById('suitPicker'); const btnNextTurn = document.getElementById('btnNextTurn'); const btnNew = document.getElementById('btnNew'); const btnRotate = document.getElementById('btnRotate'); const btnReset = document.getElementById('btnReset'); // Build players config UI function renderPlayersCfg(){ playersCfg.innerHTML=''; state.players.forEach((p,idx)=>{ const wrap=document.createElement('div'); wrap.className='player'; wrap.innerHTML= <label>نام ${seatName(idx)}</label> <input value="${p.name}" data-idx="${idx}" class="playerName"/> <div class="help" style="margin-top:6px">تیم: ${idx%2===0? 'A+C' : 'B+D'}</div> ; playersCfg.appendChild(wrap); }); playersCfg.querySelectorAll('.playerName').forEach(inp=>{ inp.addEventListener('input', e=>{ const i=+e.target.dataset.idx; state.players[i].name = e.target.value.trim()  seatName(i); updateBadges(); }); }) } targetPointsEl.addEventListener('change', ()=>{ const v = Math.max(1, Math.min(13, parseInt(targetPointsEl.value)7)); state.targetPoints=v; targetPointsEl.value=v; renderScoreDots(); }); quickModeEl.addEventListener('change', ()=>{ state.quickMode = quickModeEl.value==='1'; updateRoundStatus(); }); btnRandomHakem.addEventListener('click', ()=>{ state.hakem = (Math.random()*4)|0; state.dealer = (state.hakem+3)%4; updateBadges(); }); function renderScoreDots(){ function fill(container, n){ container.innerHTML=''; for(let i=0;i<state.targetPoints;i++){ const d=document.createElement('div'); d.className='dot'+(i<state.matchPoints[container===dots0?0:1]?' on':''); container.appendChild(d); } } fill(dots0, state.targetPoints); fill(dots1, state.targetPoints); } function suitBadgeHtml(){ if(!state.hokm) return 'حکم: —'; return حکم: <span class="suit ${SUIT_CLASS[state.hokm]}">${SUIT_ICON[state.hokm]}</span> } function updateBadges(){ hakemBadge.innerHTML = حاکم: ${seatName(state.hakem)} – ${state.players[state.hakem].name}; hokmBadge.innerHTML = suitBadgeHtml(); turnBadge.innerText = 'نوبت: '+ seatName(state.turn) + ' – ' + state.players[state.turn].name; seatEls.forEach((el,i)=>{ el.classList.toggle('active', i===state.turn);

Mohammadreza, [8/12/2025 6:42 PM]
el.textContent = ${seatName(i)}${i===state.hakem?' (حاکم)':''}; }); } function updateRoundStatus(){ const s = state.quickMode ? 'حالت سریع: فقط یک دست ۱۳ تایی' : بازی تا ${state.targetPoints} امتیاز دور; roundStatus.textContent = مرحله: ${state.phase} | ${s}; } function updateTricksStatus(){ tricksStatus.textContent = A+C: ${state.tricksWon[0]} | B+D: ${state.tricksWon[1]} (تریک ${state.trickCount+1} از 13); } // ===== Game Flow ===== function startNewHand(){ state.deck = shuffle(makeDeck()); state.hokm = null; state.hands=[[],[],[],[]]; state.table=[null,null,null,null]; state.tricksWon=[0,0]; state.trickCount=0; state.leadSuit=null; state.turn = state.hakem; // hakem starts state.phase='first5'; // Deal 5 to each starting from hakem for(let r=0;r<5;r++){ for(let i=0;i<4;i++){ const seat=(state.hakem+i)%4; state.hands[seat].push(state.deck.pop()); } } btnChooseHokm.disabled=false; updateAll(); } function declareHokm(s){ state.hokm = s; btnChooseHokm.disabled=true; state.phase='dealRest'; // deal remaining 8 to each starting from seat after dealer (standard: dealer deals; but we already dealt from deck sequentially; continue the same order) while(state.hands[0].length<13){ for(let i=0;i<4;i++){ const seat=(state.hakem+i)%4; state.hands[seat].push(state.deck.pop()); } } // sort hands by suit then rank for(let i=0;i<4;i++) sortHand(i); state.phase='play'; updateAll(); } function sortHand(i){ const orderSuit = {S:0,H:1,D:2,C:3}; state.hands[i].sort((a,b)=>{ if(a.suit!==b.suit) return orderSuit[a.suit]-orderSuit[b.suit]; return RANK_VALUE[a.rank]-RANK_VALUE[b.rank]; }); } function canPlay(seat, card){ if(state.phase!=='play') return false; if(seat!==state.turn) return false; if(state.table[seat]) return false; // follow suit rule if(state.leadSuit){ if(card.suit!==state.leadSuit){ const hasLead = state.hands[seat].some(c=>c.suit===state.leadSuit); if(hasLead) return false; } } return true; } function playCard(seat, cardId){ const hand = state.hands[seat]; const idx = hand.findIndex(c=>c.id===cardId); if(idx===-1) return; const card = hand[idx]; if(!canPlay(seat, card)) return; hand.splice(idx,1); state.table[seat] = card; if(state.leadSuit==null){ state.leadSuit = card.suit; } // advance turn if( state.table.filter(Boolean).length < 4 ){ state.turn = (state.turn+1)%4; } else { // evaluate trick const winner = evalTrickWinner(); state.trickCount++; const team = teamOf(winner); state.tricksWon[team]++; // check early finish: first to 7 tricks wins hand if(state.tricksWon[team]===7){ endHand(team); } else { // next trick state.table=[null,null,null,null]; state.leadSuit=null; state.turn = winner; // winner leads next } } updateAll(); } function evalTrickWinner(){ let winSeat = null; let winCard = null; for(let i=0;i<4;i++){ const c = state.table[i]; if(!winCard){ winCard=c; winSeat=i; continue; } winSeat = betterCard(winSeat, winCard, i, c); winCard = state.table[winSeat]; } return winSeat; } function betterCard(seatA, cardA, seatB, cardB){ // If one is trump and the other isn't, trump wins const isTrumpA = cardA.suit===state.hokm; const isTrumpB = cardB.suit===state.hokm; if(isTrumpA && !isTrumpB) return seatA; if(isTrumpB && !isTrumpA) return seatB; // If both trump or both non-trump: follow lead suit priority if(cardA.suit===cardB.suit){ return (RANK_VALUE[cardA.rank] >= RANK_VALUE[cardB.rank]) ? seatA : seatB; } // If suits differ and neither is trump: only the one matching lead suit is valid winner const lead = state.leadSuit; if(cardA.suit===lead && cardB.suit!==lead) return seatA; if(cardB.suit===lead && cardA.suit!==lead) return seatB; // Otherwise keep current return seatA; } function endHand(winnerTeam){ state.phase='handOver'; if(!state.quickMode){ state.matchPoints[winnerTeam]++; if(state.matchPoints[winnerTeam] >= state.targetPoints){ state.phase='matchOver'; } } updateAll(); } function rotateHakem(){ state.hakem = (state.hakem+1)%4; state.dealer = (state.hakem+3)%4; // dealer sits right of hakem in this model updateBadges(); } // ===== Rendering ===== function renderTable(){ for(let i=0;i<4;i++){ const

Mohammadreza, [8/12/2025 6:42 PM]
seat=seatEls[i]; const c = state.table[i]; seat.innerHTML=''; if(c){ seat.appendChild(cardHtml(c)); } else { seat.textContent = ${seatName(i)}${i===state.hakem?' (حاکم)':''}; } } } let handVisible=true; function renderHand(){ handArea.innerHTML=''; const seat = state.turn; const hand = state.hands[seat]; // show only current player's hand if visible, otherwise obfuscated backs const show = handVisible; hand.forEach(card=>{ const el = cardHtml(show? card : {rank:'■', suit:'S', id:card.id}); if(show){ // mark allowed/blocked if(canPlay(seat, card)) el.classList.add('allowed'); else el.classList.add('blocked'); el.addEventListener('click', ()=>{ if(canPlay(seat, card)) playCard(seat, card.id); }); } handArea.appendChild(el); }); } function updateAll(){ renderScoreDots(); updateBadges(); updateRoundStatus(); updateTricksStatus(); renderTable(); renderHand(); // controls btnChooseHokm.disabled = !(state.phase==='first5' && state.turn===state.hakem); suitPicker.disabled = btnChooseHokm.disabled; if(state.phase==='handOver' || state.phase==='matchOver'){ const teamName = state.phase==='matchOver' ? 'برنده نهایی' : 'برنده دست'; const winner = (state.matchPoints[0] > state.matchPoints[1]) ? 0 : (state.matchPoints[1]>state.matchPoints[0]?1: (state.tricksWon[0]>state.tricksWon[1]?0:1)); roundStatus.textContent = ${teamName}: تیم ${winner===0?'A+C':'B+D'} | امتیاز کل ${state.matchPoints[0]} - ${state.matchPoints[1]}; } } // ===== Events ===== btnChooseHokm.addEventListener('click', ()=>{ if(state.turn!==state.hakem) return; declareHokm(suitPicker.value); }); btnNextTurn.addEventListener('click', ()=>{ // For pass-and-play privacy: simply switch hand visibility off, then on handVisible = !handVisible; renderHand(); }); btnShow.addEventListener('click', ()=>{ handVisible=true; renderHand(); }); btnHide.addEventListener('click', ()=>{ handVisible=false; renderHand(); }); btnNew.addEventListener('click', ()=>{ // start new hand (keep current hakem) startNewHand(); }); btnRotate.addEventListener('click', ()=>{ rotateHakem(); }); btnReset.addEventListener('click', ()=>{ state.matchPoints=[0,0]; state.hakem=0; state.dealer=3; startNewHand(); }); // ===== Init ===== renderPlayersCfg(); renderScoreDots(); updateBadges(); updateRoundStatus(); updateTricksStatus(); renderTable(); // Auto-start first hand startNewHand(); })();
